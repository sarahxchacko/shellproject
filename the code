#include<stdio.h> 
#include<stdlib.h>
#include<string.h> 
#include<unistd.h>
#include<sys/wait.h> 

--------------------IGNORE FOR NOW----------------------------------
#define MAX_LINE 1024     //max length
#define MAX_ARGS 11      //max num of space-separated tokens
#define TOKEN_SZE 80    //token size no > 80
#define BUFF_SIZE 1024; 

//shpj = shell project (tehe) 
---------------------------------------------------------------------

//function to read the line: 
char *read_line(void) {
  
  char *buf = NULL;
  size_t bufsize = 0;
  printf("ProjSh$ ");
  //fflush(stdout); //debugging purposes

  if(getline(&buf, &bufsizw, stdin) == -1) {
      buf = NULL;
      if (feof(stdin)) {
          printf("[End of File]\n"); }
      else { perror("getline"); }
  free(buf);
  return NULL;
  }

return buf;
}

int main(int ac, char **av) {

  char *line;   

  while(1) {
    //get line
    line = read_line(); //call to read_line() function
      if (line == NULL) {
        break; 
      }
    printf("%s\n", line); //outputs what the user typed
    free(line);



//i couldn't tell if this was to get the line or read the line, i went ahead and wrote
//code to get a line just using a read line. lol :) 
---------------your code:----------------------------
    //gets input from user using fgets()
    char * read_line(void) {
    int position = 0;
    char * buffer = malloc(sizeof(char) * BUFF_SIZE);
    int num;
    }
    //If buffer is exceeded, throw error
    if(!buffer){
      fprintf(stderr, "shpj: allocation error\n");
        exit(EXIT_FAILURE);

  //If buffer is not empty, trim the buffer to remove the newline
  //////
  
  //If buffer is empty, return null
  if(fgets(buffer, BUFF_SIZE, stdin)==NULL){ return NULL;}

  return buffer;
  }
--------------------------------------------------------



//reads input 
  //check if exit command 
    //if exit... 
    //else store/execute
        //parsing input via tokens

//the built-in exit commands: 
  //exit 
  //cd 

//for external commands use fork()
  //in the child run the commands 
//the parent wait()

}

return EXIT_SUCCESS;
}



  
