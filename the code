#include<stdio.h> 
#include<stdlib.h>
#include<string.h> 
#include<unistd.h>
#include<sys/wait.h> 
#include<sys/types.h>


//uncomment if getline doesn't work on your machine: 
//#define _GNU_SOURCE

#define DEL "\n\t \v\f\r" //all types of whitespaces 

//uncomment if getline doesn't work on your machine: 
ssize_t getline(char **lineptr, size_t *n, FILE *stream); 




//read line function __________________________________________________________________ 
char *read_line(void) {
  
  char *buf = NULL;
  size_t bufsize = 0;
  printf("ProjSh$ ");
  //fflush(stdout); //debugging purposes

  if(getline(&buf, &bufsize, stdin) == -1) {
      buf = NULL;
      if (feof(stdin)) {
          printf("[End of File]\n"); }
      else { perror("getline"); }
  free(buf);
  return NULL;
  }

return buf;
}

//token function ______________________________________________________________________
char **split_line(char *line) {
  size_t position = 0;
  size_t bufsize = BUFSIZ;

  char **tokens = malloc(BUFSIZ * sizeof *tokens);
  if (!tokens) {
      perror("malloc");
      exit(EXIT_FAILURE);

  }
  char *token = strtok(line, DEL);
  while (token != NULL) {
      tokens[position++] = token;
          if (position >= bufsize) {
              bufsize *= 2;
              tokens = realloc(tokens, bufsize * sizeof(*tokens));
              if (!tokens) {
                  perror("realloc");
                  exit(EXIT_FAILURE);
              }
          }
          token = strtok(NULL, DEL);
    }
  tokens[position] = NULL; // sentinel value
  return tokens;

}

//built-in functions: exit and cd ____________________________________________________
typedef struct s_builtin {

 const char *builtin_name;
  int (*foo)(char **);
}   t_builtin;

//the exit built-in command
int shpj_exit(char **args) {
        (void)args;
        printf("e x i t i n g :)\n");
        fflush(stdout); //debugging
        exit(0);
}
//the cd built-in command
int shpj_cd(char **args) {
        const char *new_dir = NULL;
        //no directory given 
        if (args[1] == NULL) {
                new_dir = getenv("HOME");
                if (new_dir == NULL) {
                        fprintf(stderr, "cd: No HOME was set\n");
                        return 1;
                }
        } else {
                new_dir = args[1];
        }

        if(chdir(new_dir) != 0) {
                perror("cd");
                return 1;
        }
//to print the current directory
        char cwd[1024];
        if (getcwd(cwd,sizeof(cwd)) != NULL) {
                printf("Currently you are in directory: %s\n", cwd);
        } else { perror("getcwd"); }

        return 0;
}



//global built-in functions: 
t_builtin g_builtin[] =
{       
        {.builtin_name="exit", .foo = shpj_exit },
        {.builtin_name="cd", .foo = shpj_cd},
        {NULL, NULL} //to stop the loop 

};

//exec function ______________________________________________________________________
void exec(char **args) {

//no command entered
if (args[0] == NULL)
  return; 

//for a builtin function (exit or cd)
 int i = 0;
 const char *curr;
 while((curr = g_builtin[i].builtin_name)) {
                                  //printf("[DEBUGGING] Checking builtin: %s\n", curr);
        if(!strcmp(curr, args[0])) {
                                 //printf("[DEBUGGING] Found builtin: %s, calling function\n", curr);
                g_builtin[i].foo(args); //calls the builin
                                //printf("[DEBUGGING] Returned from builtin\n");
                return;
        }
        ++i;
   }

//fork + execvp for non builtin commands
pid_t pid = fork();
if (pid < 0) {
        perror("fork");
} else if (pid == 0) {
        execvp(args[0], args); //in child 
        perror("execvp"); //error
        exit(EXIT_FAILURE);
} else {
        int status;
        waitpid(pid, &status, 0);
        } //parent waits

}


//main function ___________________________________________________________________________

int main(void) {

  char *line;   

  while(1) {
    
//get line
    line = read_line(); //call to read_line() function
      if (line == NULL) {
        break; 
      }
    printf("%s\n", line); //outputs what the user typed

//splitting for tokens
    char **args = split_line(line);
        //debugging purposes: 
        for (int i=0; args[i]; ++i) {
                printf("This was your command: %s\n now watch ;)", args[i]);
        }

//calling exec() function: handles builtin and non builtin commands
  exec(args);

//free memory 
    free(args);
    free(line);

}

return EXIT_SUCCESS;
}



  
