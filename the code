#include<stdio.h> 
#include<stdlib.h>
#include<string.h> 
#include<unistd.h>
#include<sys/wait.h> 


#define MAX_LINE 1024     //max length
#define MAX_ARGS 11      //max num of space-separated tokens
#define TOKEN_SZE 80    //token size no > 80
#define BUFF_SIZE 1024; 

//shpj = shell project (tehe) 

void shpj_loop(void) {
  char line[MAX_LINE];
  char *args[MAX_ARGS];

  while(1) {
    printf("ProjSh$ ");
    //gets input from user using fgets()
    char * read_line(void) {
    int position = 0;
    char * buffer = malloc(sizeof(char) * BUFF_SIZE);
    int num;
    }
    //If buffer is exceeded, throw error
    if(!buffer){
      fprintf(stderr, "shpj: allocation error\n");
        exit(EXIT_FAILURE);

  //If buffer is not empty, trim the buffer to remove the newline
  //////
  
  //If buffer is empty, return null
  if(fgets(buffer, BUFF_SIZE, stdin)==NULL){ return NULL;}

  return buffer;
  }


}
int main() {
  shpj_loop();
  return EXIT_SUCCESS;
}

  //reads input 
  //check if exit command 
    //if exit... 
    //else store/execute
        //parsing input via tokens

//the built-in exit commands: 
  //exit 
  //cd 

//for external commands use fork()
  //in the child run the commands 
//the parent wait()

